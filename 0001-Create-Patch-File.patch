From 8c23d9041c216508a5ec62a8555642f49ea5798a Mon Sep 17 00:00:00 2001
From: Parv Dave <parvd5@gmail.com>
Date: Wed, 29 Apr 2020 23:36:26 +0530
Subject: [PATCH] Create Patch File

---
 0001-Update-README-setupv8.patch | 25 +++++++++++++
 src/App.tsx                      | 57 +++++++++++------------------
 src/Graph.tsx                    | 61 ++++++++++++++------------------
 3 files changed, 73 insertions(+), 70 deletions(-)
 create mode 100644 0001-Update-README-setupv8.patch

diff --git a/0001-Update-README-setupv8.patch b/0001-Update-README-setupv8.patch
new file mode 100644
index 0000000..fe82169
--- /dev/null
+++ b/0001-Update-README-setupv8.patch
@@ -0,0 +1,25 @@
+From c8db81e2e786ff24ff6c256eb1307c44c16291dd Mon Sep 17 00:00:00 2001
+From: jbf-insidesherpa <54832297+jbf-insidesherpa@users.noreply.github.com>
+Date: Mon, 25 Nov 2019 09:32:31 +0800
+Subject: [PATCH] Update README (setupv8)
+
+---
+ README.md | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/README.md b/README.md
+index 6019f9b..8d2a7e4 100755
+--- a/README.md
++++ b/README.md
+@@ -29,7 +29,7 @@ Implement JP Morgan Chaseâ€™s Perspective open source code in preparation for da
+ </ol>
+ 
+ <h2 id="installation" >Set up / Installation</h2>
+-<p>In order to get the server and client application code working on your machine, <a href="https://insidesherpa.s3.amazonaws.com/vinternships/companyassets/Sj7temL583QAYpHXD/setup_devenv_m2_v7.pdf">follow the setup here</a></p>
++<p>In order to get the server and client application code working on your machine, <a href="https://insidesherpa.s3.amazonaws.com/vinternships/companyassets/Sj7temL583QAYpHXD/setup_devenv_m2_v8.pdf">follow the setup here</a></p>
+ 
+ <p><b>Note</b>:This is the version of the JPM 2 exercise that uses Python 3. The Python 2.7 version is in <a href="https://github.com/insidesherpa/JPMC-tech-task-2">this other repo</a></p>
+ 
+-- 
+2.26.2.windows.1
+
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..4d2a966 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -3,65 +3,50 @@ import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
 
-/**
- * State declaration for <App />
- */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
-/**
- * The parent element of the react app.
- * It renders title, button and Graph react element.
- */
 class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
-
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
-  /**
-   * Render Graph react component with state.data parse as property data
-   */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
-  /**
-   * Get new data from server and update the state with the new data
-   */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
-  /**
-   * Render the App react component
-   */
   render() {
     return (
       <div className="App">
         <header className="App-header">
-          Bank & Merge Co Task 2
+          Bank Merge & Co Task 3
         </header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
+          <button className="btn btn-primary Stream-button" onClick={() => {this.getDataFromServer()}}>Start Streaming Data</button>
           <div className="Graph">
             {this.renderGraph()}
           </div>
@@ -71,4 +56,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..bed2a6b 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,29 +1,17 @@
 import React, { Component } from 'react';
 import { Table } from '@jpmorganchase/perspective';
 import { ServerRespond } from './DataStreamer';
+import { DataManipulator } from './DataManipulator';
 import './Graph.css';
 
-/**
- * Props declaration for <Graph />
- */
 interface IProps {
   data: ServerRespond[],
 }
 
-/**
- * Perspective library adds load to HTMLElement prototype.
- * This interface acts as a wrapper for Typescript compiler.
- */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
-
-/**
- * React component that renders Perspective based on data
- * parsed from its parent through data property.
- */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
   table: Table | undefined;
 
   render() {
@@ -31,14 +19,17 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // Get element from the DOM.
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      ratio: 'float', //Getting the ration between two stocks. 
+      lower_bound: 'float',
+      upper_bound: 'float',
       timestamp: 'date',
+      price_abc: 'float',
+      price_def: 'float',
+      trigger_alert: 'float', //When the upper_bound and lower_bound cross. 
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -46,28 +37,30 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
-      // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line'); //The type of graph we want to vizualize the data as. 
+      elem.setAttribute('row-pivots', '["timestamp"]'); //x-axis
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]'); 
+      //Handling duplicated data.
+      elem.setAttribute('aggregates', JSON.stringify({ 
+        ratio: 'avg',
+        lower_bound: 'abg',
+        upper_bound: 'avg',
+        timestamp: 'distinct count',
+        price_abc: 'avg',
+        price_def: 'avg',
+        trigger_alert: 'avg',
+      }));
     }
   }
 
   componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      this.table.update([
+        DataManipulator.generateRow(this.props.data),
+      ]); //array param
     }
   }
 }
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.26.2.windows.1

